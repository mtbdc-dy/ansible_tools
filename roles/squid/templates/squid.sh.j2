#!/bin/bash
# chkconfig: - 90 25
# pidfile: {{ squid_pid }}
# config: {{ squid_config_dir }}/squid.conf
#
### BEGIN INIT INFO
# Provides: squid
# Short-Description: starting and stopping Squid Internet Object Cache
# Description: Squid - Internet Object Cache. Internet object caching is \
#       a way to store requested Internet objects (i.e., data available \
#       via the HTTP, FTP, and gopher protocols) on a system closer to the \
#       requesting site than to the source. Web browsers can then use the \
#       local Squid cache as a proxy HTTP server, reducing access time as \
#       well as bandwidth consumption.
### END INIT INFO

# PATH=/usr/bin:/sbin:/bin:/usr/sbin
# export PATH

# Source function library.
if [ -f /etc/rc.d/init.d/functions ]
then
    . /etc/rc.d/init.d/functions
fi

# Source networking configuration.
if [ -f /etc/sysconfig/network ]
then
    . /etc/sysconfig/network
fi

if [ -f {{ squid_config_dir }}/squid ]
then
    . {{ squid_config_dir }}/squid
fi

# don't raise an error if the config file is incomplete
# set defaults instead:
SQUID_OPTS=${SQUID_OPTS:-""}
SQUID_PIDFILE_TIMEOUT=${SQUID_PIDFILE_TIMEOUT:-20}
SQUID_SHUTDOWN_TIMEOUT=${SQUID_SHUTDOWN_TIMEOUT:-100}
SQUID_CONF=${SQUID_CONF:-"{{ squid_config_dir }}/squid.conf"}

# determine the name of the squid binary
[ -f {{ squid_install_dir }}/sbin/squid ] && SQUID={{ squid_install_dir }}/sbin/squid

prog="squid"

# determine which one is the cache_swap directory
CACHE_SWAP=$(sed -e 's/#.*//g' ${SQUID_CONF} | grep cache_dir | awk '{ print $3 }')

RETVAL=0

probe()
{
    # Check that networking is up.
    [ ${NETWORKING} = "no" ] && exit 1

    [ $(id -u) -ne 0 ] && exit 4

    # check if the squid conf file is present
    [ -f ${SQUID_CONF} ] || exit 6
}

start() 
{
    probe

    local parse=$(${SQUID} -k parse -f ${SQUID_CONF} 2>&1)
    RETVAL=$?
    if [ ${RETVAL} -ne 0 ]
    then
        echo -n $"Starting $prog: "
        echo_failure
        echo
        echo "${parse}"
        return 1
    fi

    for adir in ${CACHE_SWAP}
    do
        if [ ! -d ${adir}/00 ]
        then
            echo -n "init_cache_dir $adir... "
            ${SQUID} -z -F -f ${SQUID_CONF} >> {{ squid_log_dir }}/squid.out 2>&1
        fi
    done

    echo

    echo -n $"Starting $prog: "
    ${SQUID} ${SQUID_OPTS} -f ${SQUID_CONF} >> {{ squid_log_dir }}/squid.out 2>&1
    RETVAL=$?
    if [ ${RETVAL} -eq 0 ]
    then
        local timeout=0;
        while : 
        do
            [ ! -f {{ squid_pid }} ] || break
            if [ ${timeout} -ge ${SQUID_PIDFILE_TIMEOUT} ]
            then
                RETVAL=1
                break
            fi
             
            sleep 1 && echo -n "."
            timeout=$((timeout+1))
        done
    fi

    [ ${RETVAL} -eq 0 ] && touch {{ squid_pid }}
    [ ${RETVAL} -eq 0 ] && echo_success
    [ ${RETVAL} -ne 0 ] && echo_failure

    echo
    return ${RETVAL}
}

stop() 
{
    echo -n $"Stopping $prog: "
    ${SQUID} -k check -f ${SQUID_CONF} >> {{ squid_log_dir }}/squid.out 2>&1
    RETVAL=$?
    if [ ${RETVAL} -eq 0 ]
    then
        ${SQUID} -k shutdown -f ${SQUID_CONF}
        rm -f {{ squid_pid }}
        local timeout=0
        while :
        do
            [ ! -f {{ squid_pid }} ] && break
            if [ ${timeout} -ge ${SQUID_SHUTDOWN_TIMEOUT} ]
            then
                echo
                return 1
            fi
                        
            sleep 2 && echo -n "."
            timeout=$((timeout+2))
        done
        
        echo_success
        echo
    else
        echo_failure
        if [ ! -e {{ squid_pid }} ]
        then
            RETVAL=0
        else
            rm -f {{ squid_pid }}
            RETVAL=$?
        fi
        
        echo
    fi
        
    return ${RETVAL}
}

reload() 
{
    ${SQUID} ${SQUID_OPTS} -k reconfigure -f ${SQUID_CONF}
    RETVAL=$?
}

restart()
{
    stop

    RETVAL=$?
    if [ ${RETVAL} -eq 0 ]
    then
        start
    else
        echo "Squid failed to stop in reasonable time and therefore wasn't started."
        return 1
    fi
}

condrestart()
{
    rhstatus_q || exit 0
    restart
}

rhstatus_q() 
{
    rhstatus &>/dev/null
}

rhstatus() 
{
    status ${SQUID} && ${SQUID} -k check -f ${SQUID_CONF}
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    reload|force-reload)
        reload
        ;;
    restart)
        restart
        ;;
    condrestart|try-restart)
        condrestart
        ;;
    status)
        rhstatus
        ;;
    probe)
        probe
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|reload|force-reload|restart|condrestart|try-restart|probe}"
        exit 2
esac

exit ${RETVAL}