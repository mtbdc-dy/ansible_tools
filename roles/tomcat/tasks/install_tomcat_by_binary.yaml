# ansible 远程使用的为 no-login shell,所以：环境变量 env 和 whereis、which、locate、echo ${JAVA_HOME} 等都不能使用
# 
# 使用如下方法，当目标主机 jdk 存在时，能够成功；但当 不存在，该 task 会报错
# - name: determine whether JDK exists
#   shell: "grep -wrn --color \"^JAVA_HOME=\" /etc/ ~/"
#   register: jdk_result

- name: upload judge_jdk.sh
  copy:
    src: "judge_jdk.sh"
    dest: "{{ remote_temp_dir }}/judge_jdk.sh"
    mode: 0755

- name: determin whether JDK exists
  command:
    "{{ remote_temp_dir }}/judge_jdk.sh"
  register: jdk_result

- name: upload {{ jdk_version }}
  copy:
    src: "{{ jdk_version }}"
    dest: "{{ remote_temp_dir }}/{{ jdk_version }}"
    mode: 0755
  when: jdk_result.stdout == "no"

- name: unarchive {{ jdk_version }}
  unarchive:
    src: "{{ remote_temp_dir }}/{{ jdk_version }}"
    dest: "{{ remote_temp_dir }}"
    remote_src: yes
  when: jdk_result.stdout == "no"

- name: install jdk
  shell: "{{ item }}"
  with_items:
    - "mkdir -p {{ jdk_install_dir }}"
    - "mv -f {{ remote_temp_dir }}/{{ jdk_unarchive_file }}/* {{ jdk_install_dir }}"
  when: jdk_result.stdout == "no"

- name: setup jdk environment variables
  template:
    src: "jdk_environment_variables_setup.j2"
    dest: "/etc/profile.d/jdk_environment_variables.sh"
    mode: 0644
    owner: "root"
    group: "root"
  when: jdk_result.stdout == "no" 

# 使 jdk 环境变量生效
- name: source /etc/profile
  shell: "source /etc/profile"

- name: determine whether {{ tomcat_unarchive_dir }} exists
  stat:
    path: "{{ tomcat_unarchive_dir }}"
  register: tomcat_result

# 加入目标主机已经安装了，则报错，并退出该 剧本
- name: output information
  fail:
    msg: "The target host has been installed and withdrawn from the playbook."
  when: tomcat_result.stat.exists

- name: create tomcat group
  group:
    name: "{{ tomcat_group }}"
    system: yes

- name: create tomcat user
  user:
    name: "{{ tomcat_user }}"
    comment: "Tomcat Application user"
    create_home: no
    system: yes
    shell: /bin/bash
    password: "{{ tomcat_password }}"
    group: "{{ tomcat_group }}"
    state: present

- name: upload {{ tomcat_binary_version }}
  copy:
    src: "{{ tomcat_binary_version }}"
    dest: "{{ remote_temp_dir }}/{{ tomcat_binary_version }}"
    mode: 0755

- name: unarchive {{ tomcat_binary_version }}
  unarchive:
    src: "{{ remote_temp_dir }}/{{ tomcat_binary_version }}"
    dest: "{{ remote_temp_dir }}"
    remote_src: yes
    mode: 0755

- name: install tomcat
  shell: "{{ item }}"
  with_items:
    - "mkdir -p {{ tomcat_unarchive_dir }}"
    - "mkdir -p {{ operate_tomcat_scripts_dir }}"
    - "mv -f {{ remote_temp_dir }}/{{ tomcat_binary_version | replace('.tar.gz', '') }}/* {{ tomcat_unarchive_dir }}"

- name: delete uploaded files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ remote_temp_dir }}/{{ jdk_version }}"
    - "{{ remote_temp_dir }}/{{ jdk_unarchive_file }}"
    - "{{ remote_temp_dir }}/{{ tomcat_binary_version }}"
    - "{{ remote_temp_dir }}/{{ tomcat_binary_version | replace('.tar.gz', '') }}"
    - "{{ remote_temp_dir }}/judge_jdk.sh" 